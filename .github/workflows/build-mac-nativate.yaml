name: Build Native FFmpeg for Apple Silicon

on:
  push:
    branches: [ main ]  # For development testing
  workflow_dispatch:

jobs:
  build-native:
    runs-on: macos-14  # Apple Silicon runner
    timeout-minutes: 180  # 3 hours max
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: 拉取源码
      run: |
        # 定义源码存放目录（与编译脚本中的COMPILED保持一致）
        COMPILED="./compile"

        # 创建目录（若不存在）
        mkdir -p ${COMPILED}
        echo "📂 已创建源码存放目录: ${COMPILED}"

        # 拉取源码函数（通用函数，简化重复操作）
        pull_source() {
            local name=$1
            local url=$2
            local dir=$3
            
            echo -e "\n🔍 开始拉取: ${name}"
            cd ${COMPILED} || exit 1
            
            # 若目标目录已存在，先删除（避免版本冲突）
            if [ -d "${dir}" ]; then
                echo "⚠️ 检测到已有${dir}，正在删除旧版本..."
                rm -rf ${dir}
            fi
            
            # 根据URL类型选择拉取方式（git或tar包）
            if [[ ${url} == git@* || ${url} == https://*.git ]]; then
                # git仓库
                git clone --depth 1 ${url} ${dir}
            else
                # tar包（支持.tar.gz/.tar.xz等）
                local filename=$(basename ${url})
                wget -c ${url} -O ${filename} || { echo "❌ 下载${name}失败"; exit 1; }
                
                # 自动识别压缩格式并解压
                if [[ ${filename} == *.tar.gz ]]; then
                    tar zxf ${filename}
                elif [[ ${filename} == *.tar.xz ]]; then
                    tar Jxf ${filename}
                elif [[ ${filename} == *.tar.bz2 ]]; then
                    tar jxf ${filename}
                else
                    echo "❌ 不支持的压缩格式: ${filename}"
                    exit 1
                fi
                rm -f ${filename}  # 解压后删除安装包
            fi
            
            # 验证拉取结果
            if [ -d "${dir}" ]; then
                echo "✅ ${name}拉取成功"
            else
                echo "❌ ${name}拉取失败"
                exit 1
            fi
        }

        # 1. NASM（汇编器）
        pull_source "NASM" \
            "https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/nasm-2.16.01.tar.gz" \
            "nasm-2.16.01"

        # 2. pkg-config
        pull_source "pkg-config" \
            "https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz" \
            "pkg-config-0.29.2"

        # 3. XZ（压缩工具）
        pull_source "XZ" \
            "https://tukaani.org/xz/xz-5.4.6.tar.gz" \
            "xz"

        # 4. ZLIB
        pull_source "ZLIB" \
            "https://zlib.net/zlib-1.2.13.tar.gz" \
            "zlib-1.2.13"

        # 5. CMake
        pull_source "CMake" \
            "https://cmake.org/files/v3.25/cmake-3.25.1.tar.gz" \
            "cmake-3.25.1"

        # 6. libxml2
        pull_source "libxml2" \
            "https://download.gnome.org/sources/libxml2/2.10/libxml2-2.10.3.tar.xz" \
            "libxml2-v2.10.3"

        # 7. LAME（MP3编码器）
        pull_source "LAME" \
            "https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz" \
            "lame"

        # 8. x264（H.264编码器）
        pull_source "x264" \
            "git://git.videolan.org/x264.git" \
            "x264"

        # 9. x265（H.265编码器，Neon优化版）
        pull_source "x265Neon" \
            "https://bitbucket.org/multicoreware/x265_git.git" \
            "x265Neon"

        # 10. libvpx（VP8/VP9编码器）
        pull_source "libvpx" \
            "https://github.com/webmproject/libvpx.git" \
            "libvpx"

        # 11. Expat（XML解析库）
        pull_source "Expat" \
            "https://github.com/libexpat/libexpat/releases/download/R_2_4_8/expat-2.4.8.tar.gz" \
            "expat-2.4.8"

        # 12. Gettext（国际化库）
        pull_source "Gettext" \
            "https://ftp.gnu.org/pub/gnu/gettext/gettext-0.21.1.tar.gz" \
            "gettext-0.21.1"

        # 13. libpng（PNG图像处理）
        pull_source "libpng" \
            "https://downloads.sourceforge.net/project/libpng/libpng16/1.6.37/libpng-1.6.37.tar.gz" \
            "libpng-1.6.37"

        # 14. Enca（编码检测库）
        pull_source "Enca" \
            "https://downloads.sourceforge.net/project/enca/enca/1.19/enca-1.19.tar.gz" \
            "enca-1.19"

        # 15. FriBidi（文本排版库）
        pull_source "FriBidi" \
            "https://github.com/fribidi/fribidi/releases/download/v1.0.12/fribidi-1.0.12.tar.xz" \
            "fribidi-1.0.12"

        # 16. FreeType（字体渲染库）
        pull_source "FreeType" \
            "https://download.savannah.gnu.org/releases/freetype/freetype-2.12.1.tar.gz" \
            "freetype-2.12.1"

        # 17. Fontconfig（字体配置库）
        pull_source "Fontconfig" \
            "https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.14.2.tar.xz" \
            "fontconfig-2.14.2"

        # 18. HarfBuzz（文字排版引擎）
        pull_source "HarfBuzz" \
            "https://github.com/harfbuzz/harfbuzz/releases/download/6.0.0/harfbuzz-6.0.0.tar.xz" \
            "harfbuzz-6.0.0"

        # 19. SDL2（多媒体库）
        pull_source "SDL2" \
            "https://www.libsdl.org/release/SDL2-2.26.2.tar.gz" \
            "SDL2-2.26.2"

        # 20. libass（字幕渲染库）
        pull_source "libass" \
            "https://github.com/libass/libass/releases/download/0.17.0/libass-0.17.0.tar.xz" \
            "libass-0.17.0"

        # 21. Opus（音频编码器）
        pull_source "Opus" \
            "https://downloads.xiph.org/releases/opus/opus-1.3.1.tar.gz" \
            "opus-1.3.1"

        # 22. libogg（Ogg容器格式）
        pull_source "libogg" \
            "https://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.gz" \
            "libogg-1.3.5"

        # 23. libvorbis（Vorbis音频编码器）
        pull_source "libvorbis" \
            "https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz" \
            "libvorbis-1.3.7"

        # 24. libtheora（Theora视频编码器）
        pull_source "libtheora" \
            "https://downloads.xiph.org/releases/theora/libtheora-1.1.1.tar.gz" \
            "libtheora-1.1.1"

        # 25. vid.stab（视频防抖库）
        pull_source "vid.stab" \
            "https://github.com/georgmartius/vid.stab.git" \
            "vidstab-master"

        # 26. Snappy（压缩库）
        pull_source "Snappy" \
            "https://github.com/google/snappy/archive/refs/tags/1.1.9.tar.gz" \
            "snappy"

        # 27. OpenJPEG（JPEG 2000库）
        pull_source "OpenJPEG" \
            "https://github.com/uclouvain/openjpeg/archive/refs/tags/v2.5.0.tar.gz" \
            "openjpeg-2.5.0"

        # 28. AOM（AV1编码器）
        pull_source "AOM" \
            "https://aomedia.googlesource.com/aom" \
            "aom"

        # 29. libwebp（WebP图像库）
        pull_source "libwebp" \
            "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.1.0.tar.gz" \
            "libwebp-1.1.0"

        # 30. zimg（图像缩放库）
        pull_source "zimg" \
            "https://github.com/sekrit-twc/zimg/archive/refs/tags/release-3.0.2.tar.gz" \
            "zimg-release-3.0.2"

        # 31. SVT-AV1（AV1编码器）
        pull_source "SVT-AV1" \
            "https://github.com/AOMediaCodec/SVT-AV1.git" \
            "SVT-AV1-master"

        # 32. Kvazaar（HEVC编码器）
        pull_source "Kvazaar" \
            "https://github.com/ultravideo/kvazaar/archive/refs/tags/v2.2.0.tar.gz" \
            "kvazaar-2.2.0"

        # 33. libudfread（UDF格式读取库）
        pull_source "libudfread" \
            "https://code.videolan.org/videolan/libudfread.git" \
            "libudfread"

        # 34. libbluray（蓝光播放库）
        pull_source "libbluray" \
            "https://code.videolan.org/videolan/libbluray.git" \
            "libbluray"

        # 35. FFmpeg（主程序）
        pull_source "FFmpeg" \
            "https://github.com/FFmpeg/FFmpeg.git" \
            "ffmpeg"

        echo -e "\n🎉 所有源码拉取完成！存放目录：${COMPILED}"
        echo "下一步：执行编译脚本开始编译"

    - name: 编译全部
      run: |
        # 定义本地路径（替代ramdisk路径）
        SOURCE="./sw"
        COMPILED="./compile"

        # 创建所需目录
        mkdir -p ${SOURCE}
        mkdir -p ${COMPILED}

        # 设置环境变量
        export PATH=${SOURCE}/bin:$PATH
        export CC=clang && export PKG_CONFIG_PATH="${SOURCE}/lib/pkgconfig"

        echo '♻️ 开始编译 NASM'

        # 编译NASM
        cd ${COMPILED}/nasm-2.16.01 || exit 1
        ./configure --prefix=${SOURCE}
        make -j$(nproc)  # 自动检测CPU核心数设置线程
        make install
        sleep 1

        echo '♻️ 开始编译 PKG-Config'

        # 编译PKG-Config
        cd ${COMPILED}/pkg-config-0.29.2 || exit 1
        export LDFLAGS="-framework Foundation -framework Cocoa"
        ./configure --prefix=${SOURCE} --with-pc-path=${SOURCE}/lib/pkgconfig --with-internal-glib --disable-shared --enable-static
        make -j$(nproc)
        make install
        unset LDFLAGS
        sleep 1

        # 编译XZ
        echo '♻️ 开始编译 XZ'
        cd ${COMPILED}/xz || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --disable-docs --disable-examples
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 ZLIB'

        # 编译ZLIB
        cd ${COMPILED}/zlib-1.2.13 || exit 1
        ./configure --prefix=${SOURCE} --static
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 CMake'

        # 编译CMAKE
        cd ${COMPILED}/cmake-3.25.1 || exit 1
        ./configure --prefix=${SOURCE}
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 libxml2'

        # 编译libxml2
        cd ${COMPILED}/libxml2-v2.10.3 || exit 1
        ./autogen.sh
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --without-python
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 Lame'

        # 编译Lame
        cd ${COMPILED}/lame || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 X264'

        # 编译x264
        cd ${COMPILED}/x264 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --enable-pic
        make -j$(nproc)
        make install
        make install-lib-static
        sleep 1

        echo '♻️ 开始编译 X265'

        # 编译x265
        rm -f ${SOURCE}/include/x265*.h 2>/dev/null
        rm -f ${SOURCE}/lib/libx265.a 2>/dev/null

        echo '♻️ X265 12bit'
        cd ${COMPILED}/x265Neon/source || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DHIGH_BIT_DEPTH=ON -DMAIN12=ON -DENABLE_SHARED=NO -DEXPORT_C_API=NO -DENABLE_CLI=OFF .
        make -j$(nproc)
        mv libx265.a libx265_main12.a
        make clean-generated
        rm CMakeCache.txt

        echo '♻️ X265 10bit'
        cd ${COMPILED}/x265Neon/source || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DHIGH_BIT_DEPTH=ON -DMAIN10=ON -DENABLE_HDR10_PLUS=ON -DENABLE_SHARED=NO -DEXPORT_C_API=NO -DENABLE_CLI=OFF .
        make clean
        make -j$(nproc)
        mv libx265.a libx265_main10.a
        make clean-generated && rm CMakeCache.txt

        echo '♻️ X265 full'
        cd ${COMPILED}/x265Neon/source || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DEXTRA_LIB="x265_main10.a;x265_main12.a" -DEXTRA_LINK_FLAGS=-L. -DLINKED_10BIT=ON -DLINKED_12BIT=ON -DENABLE_SHARED=OFF -DENABLE_CLI=OFF .
        make clean
        make -j$(nproc)
        mv libx265.a libx265_main.a
        libtool -static -o libx265.a libx265_main.a libx265_main10.a libx265_main12.a 2>/dev/null
        make install
        sleep 1

        echo '♻️ 开始编译 libvpx'

        # 编译VPX
        cd ${COMPILED}/libvpx || exit 1
        ./configure --prefix=${SOURCE} --enable-vp8 --enable-postproc --enable-vp9-postproc --enable-vp9-highbitdepth --disable-examples --disable-docs --enable-multi-res-encoding --disable-unit-tests --enable-pic --disable-shared
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 Expat'

        # 编译EXPAT
        cd ${COMPILED}/expat-2.4.8 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 Gettext'

        # 编译Gettext
        cd ${COMPILED}/gettext-0.21.1 || exit 1
        ./configure --prefix=${SOURCE} --disable-dependency-tracking --disable-silent-rules --disable-debug --with-included-gettext --with-included-glib \
        --with-included-libcroco --with-included-libunistring --with-included-libxml --with-emacs --disable-java --disable-native-java --disable-csharp \
        --disable-shared --enable-static --without-git --without-cvs --disable-docs --disable-examples
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 libpng'

        # 编译LIBPNG
        cd ${COMPILED}/libpng-1.6.37 || exit 1
        ./configure --prefix=${SOURCE} --disable-dependency-tracking --disable-silent-rules --enable-static --disable-shared
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 Enca'

        # 编译ENCA
        cd ${COMPILED}/enca-1.19 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 FriBidi'

        # 编译FRIBIDI
        cd ${COMPILED}/fribidi-1.0.12 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --disable-silent-rules --disable-debug --disable-dependency-tracking
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 FreeType'

        # 编译FREETYPE
        cd ${COMPILED}/freetype-2.12.1 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --enable-freetype-config
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 Fontconfig'

        # 编译FONTCONFIG
        cd ${COMPILED}/fontconfig-2.14.2 || exit 1
        ./configure --prefix=${SOURCE} --enable-iconv --disable-libxml2 --disable-dependency-tracking --disable-silent-rules --disable-shared --enable-static
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 HarfBuzz'

        # 编译HARFBUZZ
        cd ${COMPILED}/harfbuzz-6.0.0 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 SDL2'

        # 编译SDL
        cd ${COMPILED}/SDL2-2.26.2 || exit 1
        ./autogen.sh
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --without-x --enable-hidapi
        make -j$(nproc)
        make install

        # 编译LIBASS
        cd ${COMPILED}/libass-0.17.0 || exit 1
        ./configure --prefix=${SOURCE} --disable-fontconfig --disable-shared --enable-static
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 Opus'

        # 编译OPUS
        cd ${COMPILED}/opus-1.3.1 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install
        sleep 1

        # 编译LIBOGG
        cd ${COMPILED}/libogg-1.3.5 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --disable-dependency-tracking
        make -j$(nproc)
        make install
        sleep 1

        # 编译LIBVORBIS
        cd ${COMPILED}/libvorbis-1.3.7 || exit 1
        ./configure --prefix=${SOURCE} --with-ogg-libraries=${SOURCE}/lib --with-ogg-includes=${SOURCE}/include/ --enable-static --disable-shared
        make -j$(nproc)
        make install
        sleep 1

        # 编译libtheora
        cd ${COMPILED}/libtheora-1.1.1 || exit 1
        ./configure --prefix=${SOURCE} --disable-asm --with-ogg-libraries=${SOURCE}/lib --with-ogg-includes=${SOURCE}/include/ --with-vorbis-libraries=${SOURCE}/lib --with-vorbis-includes=${SOURCE}/include/ --enable-static --disable-shared
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 Vid-stab'

        # 编译Vidstab
        cd ${COMPILED}/vidstab-master || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DLIBTYPE=STATIC -DBUILD_SHARED_LIBS=OFF -DUSE_OMP=OFF -DENABLE_SHARED=off .
        make -j$(nproc)
        make install
        sleep 1

        # 编译SNAPPY
        cd ${COMPILED}/snappy || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DENABLE_SHARED=OFF -DENABLE_CLI=OFF .
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 OpenJPEG'

        # 编译OpenJPEG
        cd ${COMPILED}/openjpeg-2.5.0 || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DENABLE_C_DEPS=ON -DLIBTYPE=STATIC -DENABLE_SHARED=OFF -DENABLE_STATIC=ON .
        make -j$(nproc)
        make install
        rm ${SOURCE}/lib/libopenjp2.2.5.0.dy* 2>/dev/null
        rm ${SOURCE}/lib/libopenjp2.dy* 2>/dev/null
        rm ${SOURCE}/lib/libopenjp2.7.dy* 2>/dev/null

        sleep 1

        echo '♻️ 开始编译 AOM'

        # 编译AOM
        cd ${COMPILED}/aom || exit 1
        mkdir -p aom_build
        cd aom_build || exit 1
        cmake ${COMPILED}/aom -DENABLE_TESTS=0 -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DLIBTYPE=STATIC -DAOM_TARGET_CPU=ARM64 -DCONFIG_RUNTIME_CPU_DETECT=0
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 libwebp'

        # 编译WEBP
        cd ${COMPILED}/libwebp-1.1.0 || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DENABLE_C_DEPS=ON -DLIBTYPE=STATIC -DENABLE_SHARED=OFF -DENABLE_STATIC=ON .
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 zimg'
        cd ${COMPILED}/zimg-release-3.0.2 || exit 1
        ./autogen.sh
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 SVT-AV1'

        # 编译SVT-AV1
        cd ${COMPILED}/SVT-AV1-master || exit 1
        cmake -DCMAKE_INSTALL_PREFIX:PATH=${SOURCE} -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF -DLIBTYPE=STATIC -DENABLE_SHARED=OFF -DENABLE_STATIC=ON .
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 Kvazaar'

        # 编译KVAZAAR
        cd ${COMPILED}/kvazaar-2.2.0 || exit 1
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 libudfread'

        # 编译libudfread
        cd ${COMPILED}/libudfread || exit 1
        ./bootstrap
        ./configure --prefix=${SOURCE} --disable-shared --enable-static
        make -j$(nproc)
        make install
        sleep 1

        echo '♻️ 开始编译 libbluray'

        # 编译libbluray
        cd ${COMPILED}/libbluray || exit 1
        ./bootstrap
        ./configure --prefix=${SOURCE} --disable-shared --enable-static --disable-dependency-tracking --disable-silent-rules --without-libxml2 --without-freetype --disable-doxygen-doc --disable-bdjava-jar
        make -j$(nproc)
        make install

        echo '♻️ 开始编译 FFmpeg'

        # 编译FFMPEG
        cd ${COMPILED}/ffmpeg || exit 1
        export LDFLAGS="-L${SOURCE}/lib"
        export CFLAGS="-I${SOURCE}/include"
        export LDFLAGS="$LDFLAGS -framework VideoToolbox"
        ./configure \
          --prefix=${SOURCE} \
          --extra-cflags="-fno-stack-check" \
          --arch=arm64 \
          --cc=/usr/bin/clang \
          --enable-gpl \
          --enable-libbluray \
          --enable-libopenjpeg \
          --enable-libopus \
          --enable-libmp3lame \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libvpx \
          --enable-libwebp \
          --enable-libass \
          --enable-libfreetype \
          --enable-fontconfig \
          --enable-libtheora \
          --enable-libvorbis \
          --enable-libsnappy \
          --enable-libaom \
          --enable-libvidstab \
          --enable-libzimg \
          --enable-libsvtav1 \
          --enable-libkvazaar \
          --enable-libharfbuzz \
          --pkg-config-flags=--static \
          --enable-ffplay \
          --enable-postproc \
          --enable-neon \
          --enable-runtime-cpudetect \
          --disable-indev=qtkit \
          --disable-indev=x11grab_xcb
        make -j$(nproc)
        make install
        
   
    - name: Test built binaries
      run: |
        # 二进制文件位于编译输出目录的bin文件夹
        export BIN_DIR="./sw/bin"
        ${BIN_DIR}/ffmpeg -version | head -1
        ${BIN_DIR}/ffprobe -version | head -1
        file ${BIN_DIR}/ffmpeg | head -1
        
        # 测试VideoToolbox支持
        ${BIN_DIR}/ffmpeg -hide_banner -encoders 2>/dev/null | grep -q videotoolbox && echo "✅ VideoToolbox acceleration available" || echo "❌ VideoToolbox acceleration missing"
        
        # 测试运动向量支持
        ${BIN_DIR}/ffmpeg -hide_banner -filters 2>/dev/null | grep -q codecview && echo "✅ Motion vectors support available" || echo "❌ Motion vectors support missing"
        
        echo "✅ Binary tests completed"
        
    - name: Package binaries
      run: |
        mkdir -p release
        # 从编译输出目录复制二进制文件
        cp ./sw/bin/ffmpeg release/
        cp ./sw/bin/ffprobe release/
        cp ./sw/bin/ffplay release/ 2>/dev/null || true
        
        cd release
        tar -czf ../ffmpeg-apple-silicon-native-${{ github.ref_name }}.tar.gz *
        cd ..
        
        # 生成校验和
        shasum -a 256 ffmpeg-apple-silicon-native-${{ github.ref_name }}.tar.gz > checksums.txt
        
        echo "✅ Binaries packaged successfully"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-apple-silicon-native
        path: |
          ffmpeg-apple-silicon-native-*.tar.gz
          checksums.txt