name: Build FFmpeg macOS ARM64 Full

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    env:
      BUILD_DIR: ${{ runner.temp }}/ffmpeg_build
      INSTALL_DIR: ${{ github.workspace }}/ffmpeg_output
      PATH: ${{ runner.temp }}/ffmpeg_build/bin:$PATH

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up environment directories
        run: |
          mkdir -p "$BUILD_DIR" "$INSTALL_DIR"
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          echo "INSTALL_DIR=$INSTALL_DIR" >> $GITHUB_ENV

      - name: Install basic tools
        run: |
          brew install cmake nasm yasm pkg-config wget

      # ------------------------
      # libiconv
      # ------------------------
      - name: Build libiconv
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_libiconv"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached libiconv"
          else
            curl -LO https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz
            tar xf libiconv-1.16.tar.gz
            cd libiconv-1.16
            ./configure --prefix="$BUILD_DIR" --enable-static --disable-shared
            make -j$(sysctl -n hw.ncpu)
            make install
            mv libiconv-1.16 "$CACHE_DIR"
          fi

      # ------------------------
      # expat
      # ------------------------
      - name: Build expat
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_expat"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached expat"
          else
            curl -L -o expat-2.2.10.tar.gz https://github.com/libexpat/libexpat/releases/download/R_2_2_10/expat-2.2.10.tar.gz
            tar xf expat-2.2.10.tar.gz
            cd expat-2.2.10
            ./configure --prefix="$BUILD_DIR" --enable-static --disable-shared
            make -j$(sysctl -n hw.ncpu)
            make install
            mv expat-2.2.10 "$CACHE_DIR"
          fi

      # ------------------------
      # fribidi
      # ------------------------
      - name: Build fribidi
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_fribidi"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached fribidi"
          else
            FRIBIDI_VER="1.0.12"
            curl -L -o fribidi-$FRIBIDI_VER.tar.xz https://github.com/fribidi/fribidi/releases/download/$FRIBIDI_VER/fribidi-$FRIBIDI_VER.tar.xz
            tar xf fribidi-$FRIBIDI_VER.tar.xz
            cd fribidi-$FRIBIDI_VER
            ./configure --prefix="$BUILD_DIR" --enable-static --disable-shared
            make -j$(sysctl -n hw.ncpu)
            make install
            mv fribidi-$FRIBIDI_VER "$CACHE_DIR"
          fi

      # ------------------------
      # enca
      # ------------------------
      - name: Build enca
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_enca"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached enca"
          else
            curl -L -o enca-1.19.tar.gz https://dl.cihar.com/enca/enca-1.19.tar.gz
            tar xf enca-1.19.tar.gz
            cd enca-1.19
            ./configure --prefix="$BUILD_DIR" --enable-static --disable-shared
            make -j$(sysctl -n hw.ncpu)
            make install
            mv enca-1.19 "$CACHE_DIR"
          fi

      # ------------------------
      # x264
      # ------------------------
      - name: Build x264
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_x264"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached x264"
          else
            git clone https://code.videolan.org/videolan/x264.git "$CACHE_DIR"
            cd "$CACHE_DIR"
            ./configure --prefix="$BUILD_DIR" --enable-static --enable-pic
            make -j$(sysctl -n hw.ncpu)
            make install
          fi

      # ------------------------
      # x265
      # ------------------------
      - name: Build x265
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_x265"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached x265"
          else
            git clone https://bitbucket.org/multicoreware/x265_git "$CACHE_DIR"
            cd "$CACHE_DIR/build"
            cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$BUILD_DIR" -DENABLE_SHARED=OFF ../source
            make -j$(sysctl -n hw.ncpu)
            make install
          fi

      # ------------------------
      # LAME
      # ------------------------
      - name: Build LAME
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_lame"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached lame"
          else
            git clone https://github.com/rbrito/lame.git "$CACHE_DIR"
            cd "$CACHE_DIR"
            ./configure --prefix="$BUILD_DIR" --enable-nasm --disable-shared
            make -j$(sysctl -n hw.ncpu)
            make install
          fi

      # ------------------------
      # freetype
      # ------------------------
      - name: Build freetype
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_freetype"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached freetype"
          else
            curl -LO https://download.savannah.gnu.org/releases/freetype/freetype-2.13.0.tar.gz
            tar xf freetype-2.13.0.tar.gz
            cd freetype-2.13.0
            ./configure --prefix="$BUILD_DIR" --enable-static --disable-shared
            make -j$(sysctl -n hw.ncpu)
            make install
          fi

      # ------------------------
      # fontconfig
      # ------------------------
      - name: Build fontconfig
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_fontconfig"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached fontconfig"
          else
            curl -LO https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.14.2.tar.gz
            tar xf fontconfig-2.14.2.tar.gz
            cd fontconfig-2.14.2
            ./configure --prefix="$BUILD_DIR" --enable-static --disable-shared --with-freetype-config="$BUILD_DIR/bin/freetype-config"
            make -j$(sysctl -n hw.ncpu)
            make install
          fi

      # ------------------------
      # libass
      # ------------------------
      - name: Build libass
        run: |
          CACHE_DIR="${RUNNER_TEMP}/cache_libass"
          if [ -d "$CACHE_DIR" ]; then
            echo "Using cached libass"
          else
            curl -L -o libass-0.17.1.tar.gz https://github.com/libass/libass/releases/download/0.17.1/libass-0.17.1.tar.gz
            tar xf libass-0.17.1.tar.gz
            cd libass-0.17.1
            ./configure --prefix="$BUILD_DIR" --enable-static --disable-shared
            make -j$(sysctl -n hw.ncpu)
            make install
          fi

      # ------------------------
      # FFmpeg
      # ------------------------
      - name: Build FFmpeg
        run: |
          git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg
          PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig" ./configure \
            --prefix="$BUILD_DIR" \
            --pkg-config-flags="--static" \
            --extra-cflags="-I$BUILD_DIR/include" \
            --extra-ldflags="-L$BUILD_DIR/lib" \
            --extra-libs="-lpthread -lm" \
            --bindir="$INSTALL_DIR/bin" \
            --enable-gpl \
            --enable-libx264 \
            --enable-libx265 \
            --enable-libfreetype \
            --enable-libfontconfig \
            --enable-libass \
            --enable-libfribidi \
            --enable-libenca \
            --enable-libexpat \
            --enable-libiconv \
            --enable-libmp3lame \
            --enable-nonfree \
            --enable-static \
            --disable-shared \
            --enable-ffplay
          make -j$(sysctl -n hw.ncpu)
          make install

      - name: List built binaries
        run: |
          ls -lh $INSTALL_DIR/bin
