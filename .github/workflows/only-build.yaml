name: FF FFmpeg Static Build (macOS Apple Silicon)

# 触发条件：手动触发 + 推送到main分支时触发
on:
  workflow_dispatch: # 手动触发
  push:
    branches: [main]

jobs:
  build:
    runs-on: macos-14 # 使用最新macOS runner（支持Apple Silicon）
    steps:
      - name: Checkout 自己
        uses: actions/checkout@v5

      - name: 缓存HomeBrew 依赖
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/Cellar
            /opt/homebrew/lib
            /opt/homebrew/include
            /opt/homebrew/bin
          key: ${{ runner.os }}-homebrew-${{ hashFiles('.github/workflows/only-build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: 检查并更新Homebrew
        run: |
          brew update && brew upgrade

      - name: checkout ffmpeg源码
        uses: actions/checkout@v5
        with:
          repository: FFmpeg/FFmpeg
          ref: master
          persist-credentials: false
          path: ffmpeg-source

      - name: 安装相关依赖
        run: |
          brew install pkgconf
          # 安装必要依赖
          brew install aom dav1d fontconfig freetype frei0r harfbuzz lame libass libvorbis libvpx libx11 libxcb opus sdl2 snappy theora x264 x265 xz
          # 安装macos特有的依赖
          brew install libarchive libogg libsamplerate
      - name: 配置编译configure
        run: |
          # 为 libarchive 添加额外路径
          export PATH="/opt/homebrew/opt/libarchive/bin:/opt/homebrew/bin:$PATH"
          export LDFLAGS="-L/opt/homebrew/opt/libarchive/lib -L/opt/homebrew/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/libarchive/include -I/opt/homebrew/include"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/libarchive/lib/pkgconfig:/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig"
          export CPATH="/opt/homebrew/opt/libarchive/include:/opt/homebrew/include"
          export LIBRARY_PATH="/opt/homebrew/opt/libarchive/lib:/opt/homebrew/lib"

          
          mkdir /opt/homebrew/ffmpeg-build

          cd ffmpeg-source
          ./configure --prefix=/opt/homebrew/ffmpeg-build --enable-static --disable-shared --cc=clang --enable-gpl --enable-libaom --enable-libdav1d --enable-libharfbuzz --enable-libmp3lame --enable-libopus --enable-libsnappy --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-demuxer=dash --enable-neon --enable-opencl --enable-audiotoolbox --enable-videotoolbox --disable-htmlpages --pkg-config-flags="--static" --disable-indev=x11grab_xcb
      - name: 编译安装
        run: |
          cd ffmpeg-source
          make install
          make alltools

      - name: 安装工具到bin目录和共享目录
        run: |
          # 定义目标路径（与configure中的--prefix对应）
          PREFIX="/opt/homebrew/ffmpeg-build"
          # 1. 安装tools目录下的可执行文件到bin目录（对应 bin.install ...）
          # 查找tools目录下所有可执行文件并复制到bin目录
          find ffmpeg-source/tools -type f -executable -print0 | xargs -0 -I {} cp {} "$PREFIX/bin/"
          # 2. 安装python工具目录到共享目录（对应 pkgshare.install ...）
          # 创建共享目录（通常是prefix/share/ffmpeg）
          mkdir -p "$PREFIX/share/ffmpeg"
          # 复制tools/python目录到共享目录
          cp -r ffmpeg-source/tools/python "$PREFIX/share/ffmpeg/"
          # 确保权限正确
          chmod -R 755 "$PREFIX/bin/"* "$PREFIX/share/ffmpeg/python"


      - name: 测试
        run: |
          # 测试ffmpeg是否安装成功
          /opt/homebrew/ffmpeg-build/bin/ffmpeg -version
          # 测试工具是否安装成功（以一个示例工具为例，根据实际工具名调整）
          if [ -f "/opt/homebrew/ffmpeg-build/bin/qt-faststart" ]; then
            echo "工具安装成功: qt-faststart"
            /opt/homebrew/ffmpeg-build/bin/qt-faststart -h
          fi
          # 测试Python工具目录是否存在
          if [ -d "/opt/homebrew/ffmpeg-build/share/ffmpeg/python" ]; then
            echo "Python工具目录安装成功"
            ls -l "/opt/homebrew/ffmpeg-build/share/ffmpeg/python"
          fi
      - name: 打包构建结果
        run: |
          # 在当前工作目录下创建打包目录（避免使用$HOME导致路径问题）
          mkdir -p ${{ github.workspace }}/ffmpeg-release
          
          # 获取FFmpeg版本信息
          FFMPEG_VERSION=$(/opt/homebrew/ffmpeg-build/bin/ffmpeg -version | head -n 1 | awk '{print $3}' | cut -d '-' -f 1)
          
          # 定义打包文件名（包含版本和日期）
          TIMESTAMP=$(date +%Y%m%d)
          PACKAGE_NAME="ffmpeg-${FFMPEG_VERSION}-macos-arm64-${TIMESTAMP}.zip"
          
          # 复制构建结果到打包目录
          cp -R /opt/homebrew/ffmpeg-build/* ${{ github.workspace }}/ffmpeg-release/
          
          # 打包（在当前工作目录执行，确保路径干净）
          cd ${{ github.workspace }}
          zip -r $PACKAGE_NAME ffmpeg-release/
          
          # 输出打包信息
          echo "打包完成: $PACKAGE_NAME"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          # 直接使用当前工作目录下的文件，无需../
          path: ${{ github.workspace }}/${{ env.PACKAGE_NAME }}
          retention-days: 30